1. Опишите разницу между синхронными и асинхронными функциями.
-синхронная выполняет все по порядку( строка за строкой), без сюрпризов. Асинхронная функция- нет. Код не следует 
обычной последовательности сверху вниз, некоторые операции могут выполняться отдельно, не блокирую выполнения друго-
го кода(походе на разбивание 1 большой задачи на несколько задач поменьше)

2. Сравните подходы работы с асинхронным кодом: *сallbacks* vs *promises* vs *async / await*
-сallback- вызывается в ответ на совершение какого-то события (сразу), промисы - через какое-то время(когда произойдет
какое-то событие), async возвращает промис, с помощью await можно вызвать другие асинхронные функции

3. Что такое цикл событий (event loop) в JS ?
-отвечает за выполнение кода, сбора и обработки событий и выполнения подзадач из очереди

4. Какая разница между «стеком вызовов» (call stack) и «очередью задач» (task queue)?
-Стек вызовов - это структура стековых данных, которая хранит информацию об активных подпрограммах компьютерной 
программы. Очередь заданий - это структура данных, поддерживаемая программным обеспечением для планирования 
заданий, содержащая задания для выполнения. Заданию будут присвоены переменные, а стек вызовов будет абстрактной 
реализацией.

5. Какие версии HTTP-протокола вам известны?
-HTTP0.9, HTTP1, HTTP1.1 , HTTP2 и HTTP3

6. Какие знаете коды ответа (состояния) HTTP?
- - 200 OK;
- 401 Unauthorized;
- 403 Forbidden;
- 404 Not Found;
- 500 Internal Server Error.

7. Как клиент взаимодействует с сервером?
-Клиент и сервер взаимодействую друг с другом в сети Интернет или в любой другой компьютерной сети при помощи 
различных сетевых протоколов, например, IP протокол, HTTP протокол, FTP и другие.При помощи HTTP протокола браузер 
отправляет специальное HTTP сообщение, в котором указано какую информацию и в каком виде он хочет получить от сервера, 
сервер, получив такое сообщение, отсылает браузеру в ответ похожее по структуре сообщение (или несколько сообщений), 
в котором содержится нужная информация, обычно это HTML документ.

8. Самостоятельно разберитесь, что такое Cross-Origin Resource Sharing? Как устранить проблемы с CORS?
-CORS (Cross-Origin Resource Sharing, англ. «совместное использование ресурсов разных источников») — это стандарт, 
позволяющий предоставлять веб-страницам доступ к объектам сторонних интернет-ресурсов. Сторонним считается любой 
интернет-ресурс, который отличается от запрашиваемого протоколом, доменом или портом.Доступ предоставляется по 
специализированным запросам.
(CORS) — механизм, использующий дополнительные HTTP-заголовки, чтобы дать возможность агенту пользователя получать 
разрешения на доступ к выбранным ресурсам с сервера на источнике (домене), отличном от того, что сайт использует в 
данный момент.
В целях безопасности браузеры ограничивают cross-origin запросы, инициируемые скриптами. Например, XMLHttpRequest и 
Fetch API следуют политике одного источника (same-origin policy). Это значит, что web-приложения, использующие такие API, 
могут запрашивать HTTP-ресурсы только с того домена, с которого были загружены, пока не будут использованы CORS-заголовки.
устранить проблемы с CORS можно путем: настройки CORS с параметрами, установки нестандартных заголовков предпечатной проверки,


9. Самостоятельно разберитесь, что такое REST?
-REST API — это архитектурный подход, который устанавливает ограничения для API: как они должны быть устроены и какие функции 
поддерживать. Это позволяет стандартизировать работу программных интерфейсов, сделать их более удобными и производительными.
Это простой список рекомендаций, которым можно следовать или не следовать. Поэтому у него нет собственных методов. С другой 
стороны, его автор Рой Филдинг создал ещё и протокол HTTP, так что они очень хорошо сочетаются, и REST обычно используют в связке с HTTP. 
Хотя нужно помнить: REST — это не только HTTP, а HTTP — не только REST.

10. Как посмотреть заголовки запроса к странице или API?
- через headers : ...


11. Что можно писать в параметре заголовков `Content-Type` ?
-В запросах (таких, как POST или PUT), клиент сообщает серверу тип отправляемых данных.

12. Давайте отправим информацию о собачке в API по адресу `localhost/pets/add`
Как будет выглядеть fetch в таком случае?
-
fetch('https://localhost/pets/add.com', {
  method: 'POST',
  body: JSON.stringify({
    name: 'Рекс',
    age: 2,
    breed :'Немецкая овчарка'
  })
});